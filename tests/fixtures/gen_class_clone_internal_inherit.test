---SUMMARY---
Test fixture for the GENERATE:CLASS generator.
---COMMAND---
generate:class --name=Foo --clone=SplMinHeap --reflect --inherit --no-test
---EXPECTED---
[ File 1 ] APPPATH/classes/Foo.php

<?php defined('SYSPATH') OR die('No direct script access.');
/**
 * Class Foo, cloned from SplMinHeap.
 *
 * @package    package
 * @category   category
 * @author     Test Author
 * @copyright  (c) 2012 Test Author
 * @license    Test license
 */
class Foo extends SplHeap implements Countable, Iterator
{
	/**
	 * Implementation of SplHeap::extract
	 *
	 * @return  void  **Needs editing**
	 */
	public function extract()
	{
		parent::extract();
	}

	/**
	 * Implementation of SplHeap::insert
	 *
	 * @param   mixed  $value
	 * @return  void  **Needs editing**
	 */
	public function insert($value)
	{
		parent::insert($value);
	}

	/**
	 * Implementation of SplHeap::top
	 *
	 * @return  void  **Needs editing**
	 */
	public function top()
	{
		parent::top();
	}

	/**
	 * Implementation of SplHeap::count
	 *
	 * From interface: Countable
	 *
	 * @return  void  **Needs editing**
	 */
	public function count()
	{
		parent::count();
	}

	/**
	 * Implementation of SplHeap::isEmpty
	 *
	 * @return  void  **Needs editing**
	 */
	public function isEmpty()
	{
		parent::isEmpty();
	}

	/**
	 * Implementation of SplHeap::rewind
	 *
	 * From interface: Iterator
	 *
	 * @return  void  **Needs editing**
	 */
	public function rewind()
	{
		parent::rewind();
	}

	/**
	 * Implementation of SplHeap::current
	 *
	 * From interface: Iterator
	 *
	 * @return  void  **Needs editing**
	 */
	public function current()
	{
		parent::current();
	}

	/**
	 * Implementation of SplHeap::key
	 *
	 * From interface: Iterator
	 *
	 * @return  void  **Needs editing**
	 */
	public function key()
	{
		parent::key();
	}

	/**
	 * Implementation of SplHeap::next
	 *
	 * From interface: Iterator
	 *
	 * @return  void  **Needs editing**
	 */
	public function next()
	{
		parent::next();
	}

	/**
	 * Implementation of SplHeap::valid
	 *
	 * From interface: Iterator
	 *
	 * @return  void  **Needs editing**
	 */
	public function valid()
	{
		parent::valid();
	}

	/**
	 * Implementation of SplHeap::recoverFromCorruption
	 *
	 * @return  void  **Needs editing**
	 */
	public function recoverFromCorruption()
	{
		parent::recoverFromCorruption();
	}

	/**
	 * Implementation of SplMinHeap::compare
	 *
	 * @param   mixed  $a
	 * @param   mixed  $b
	 * @return  void  **Needs editing**
	 */
	protected function compare($a, $b)
	{
		// Method implementation
	}

} // End Foo
---END---
